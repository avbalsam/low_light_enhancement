import logging
import os
import threading
import uuid
from io import BytesIO
from zipfile import ZipFile

import cv2
import flask
from flask import Flask, render_template, request, send_from_directory, send_file
from werkzeug.utils import secure_filename, redirect

from algs import get_algorithms, get_algorithm
from colormaps import get_colormaps, get_colormap_by_name
from low_signal_detector import LowSignalDetector as LSD

app = Flask(__name__)


def find_lsd_by_id(detector_id):
    for detector in LOW_SIGNAL_DETECTORS:
        if detector.get_id() == detector_id:
            return detector
    logging.error(f"Did not find an LSD with ID {detector_id}")
    return None


def allowed_file(filename):
    """
    Determines whether a file has an allowed extension

    Args:
        filename (str): The filename to check

    Returns:
        is_allowed (bool): Whether the filename is allowed
    """
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/<path:filename>', methods=['GET', 'POST'])
def download(filename):
    """
    Downloads the selected filename

    Args:
        filename (str): The file to download

    Returns:
        None
    """
    return send_from_directory(directory='/', path=filename)


@app.route('/')
def index_page():
    return render_template("index.html")


@app.route('/about')
def about():
    return render_template("about.html")


@app.route('/contact')
def contact():
    return render_template("contact.html")


@app.route('/enhance')
def enhance_page():
    return render_template("enhance.html", algorithms=get_algorithms(), colormaps=get_colormaps())


@app.route('/<detector_id>')
def enhanced_images(detector_id):
    """
    Display the images contained within the user's ImageEnhancer
    """
    lsd = find_lsd_by_id(detector_id)

    if lsd is None:
        redirect('/')

    return render_template("algorithm.html", original_images=lsd.ORIGINAL_IMAGES,
                           enhanced_images=lsd.ENHANCED_IMAGES,
                           download_paths_by_image=lsd.DOWNLOAD_PATHS_BY_IMAGE,
                           user_id=lsd.ID)


@app.route('/download_all/<i>/<detector_id>')
def download_all_by_num(i, detector_id):
    """
    Downloads all images from self.DOWNLOAD_PATHS_BY_IMAGE[i] (representing the images generated by the various algs
    applied to "i"th image) as .zip file.

    Args:
        i (int): The number image for which to download algs applied
        detector_id (str): The unique ID of the current user's LowSignalDetector
    """
    lsd = find_lsd_by_id(detector_id)
    if lsd is None:
        redirect('/')
    paths = lsd.DOWNLOAD_PATHS_BY_IMAGE[int(i)]
    stream = BytesIO()
    with ZipFile(stream, 'w') as zf:
        for file in paths:
            zf.write(file, os.path.basename(file))
    stream.seek(0)

    return send_file(
        stream,
        as_attachment=True,
        attachment_filename='enhanced_images.zip'
    )


@app.route('/download_all/<detector_id>')
def download_all(detector_id):
    """
    Downloads all images from self.DOWNLOAD_PATHS_BY_IMAGE as .zip file
    (every file this user's LSD class has generated). Does not pick a specific image to save.

    Args:
        detector_id (str): The unique ID of the current user's LSD
    """
    lsd = find_lsd_by_id(detector_id)
    if lsd is None:
        redirect('/')

    paths = list()
    for path_list in lsd.DOWNLOAD_PATHS_BY_IMAGE:
        for path in path_list:
            paths.append(path)
    stream = BytesIO()
    with ZipFile(stream, 'w') as zf:
        for file in paths:
            zf.write(file, os.path.basename(file))
    stream.seek(0)

    return send_file(
        stream,
        as_attachment=True,
        attachment_filename='enhanced_images.zip'
    )


@app.route('/algorithm', methods=['POST'])
def algorithm():
    """
    Creates new LowSignalDetector and a thread to run its run_algorithm() method. Returns a screen which will take the
    user to a screen containing the images he has enhanced.
    """

    radius_denoising = int(request.form['noiseRadiusInput'])
    radius_circle = int(request.form['circleRadiusInput'])
    algs = [(abbr, get_algorithm(abbr)) for abbr in request.form.getlist('algorithmCheckbox')]
    if algs == list():
        return redirect('/')
    colormap = request.form.get('colormapInput')

    if colormap is None:
        colormap = cv2.COLORMAP_BONE
    else:
        colormap = get_colormap_by_name(colormap)

    do_enhance = True

    images = flask.request.files.getlist('fileUploadInput')
    images_by_filename = list()
    for image in images:
        if image.filename == '':
            return redirect('/')
        if image and allowed_file(image.filename):
            filename = f"{str(uuid.uuid4())}.tiff"
            path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            image.save(path)
            images_by_filename.append(path)
        else:
            return """<h1>Please upload an image with the correct file type.</h1>
                        <a href="/enhance">Go back to the homepage</a>"""

    output_folder = os.path.join(app.config['ENHANCED_FOLDER'])
    lsd = LSD(images_by_filename=images_by_filename, algs=algs, radius_denoising=radius_denoising,
              radius_circle=radius_circle, colormap=colormap, do_enhance=do_enhance, output_folder=output_folder)
    LOW_SIGNAL_DETECTORS.append(lsd)

    t = threading.Thread(target=lsd.run_algorithm)
    t.start()

    return render_template('submitted.html', user_id=lsd.ID)


# Create folders to store user uploaded and enhanced images
enhanced_image_folder = os.path.join('static', 'enhanced_data')
upload_folder = os.path.join('static', 'uploads')
app.config['ENHANCED_FOLDER'] = enhanced_image_folder
app.config['UPLOAD_FOLDER'] = upload_folder

# Do not allow uploading files greater than 32 megabytes
app.config['MAX_CONTENT_LENGTH'] = 32 * 1000 * 1000

# Set allowed extensions
ALLOWED_EXTENSIONS = {'tiff', 'tif'}

# Make sure user upload and enhanced image folders exist
if not (os.path.exists(enhanced_image_folder)):
    os.makedirs(enhanced_image_folder)

if not (os.path.exists(upload_folder)):
    os.makedirs(upload_folder)

# Create a new instance of the LSD class to store user data
LOW_SIGNAL_DETECTORS = list()

# Start the flask app
port = int(os.environ.get('PORT', 5000))
app.run(host='0.0.0.0', port=port)
