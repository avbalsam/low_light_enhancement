import os
import threading
import time
import uuid
from io import BytesIO
from zipfile import ZipFile

import cv2
import flask
from flask import Flask, render_template, request, send_from_directory, send_file
from werkzeug.utils import secure_filename, redirect

import low_signal_detection as lsd
from algs import get_algorithms, get_algorithm, get_algorithm_name
from colormaps import get_colormaps, get_colormap_by_name

app = Flask(__name__)


def find_image_enhancer_by_id(enhancer_id):
    for enhancer in IMAGE_ENHANCERS:
        if enhancer.get_id() == enhancer_id:
            return enhancer


def allowed_file(filename):
    """
    Determines whether a file has an allowed extension

    Args:
        filename (str): The filename to check

    Returns:
        is_allowed (bool): Whether the filename is allowed
    """
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/<path:filename>', methods=['GET', 'POST'])
def download(filename):
    """
    Downloads the selected filename

    Args:
        filename (str): The file to download

    Returns:
        None
    """
    return send_from_directory(directory='/', path=filename)


@app.route('/')
def index_page():
    return render_template("index.html")


@app.route('/about')
def about():
    return render_template("about.html")


@app.route('/contact')
def contact():
    return render_template("contact.html")


@app.route('/enhance')
def enhance_page():
    return render_template("enhance.html", algorithms=get_algorithms(), colormaps=get_colormaps())


class ImageEnhancer:
    """
    Class to handle image enhancement and store information about the images the user has enhanced.
    One instance of this class is created for every user.
    """
    def __init__(self):
        self.ORIGINAL_IMAGES = list()
        self.ENHANCED_IMAGES = list()
        self.DOWNLOAD_PATHS_BY_IMAGE = list()
        self.ID = str(uuid.uuid4())

    def get_id(self):
        return self.ID

    def run_algorithm(self, radius_denoising, radius_circle, algs, colormap, do_enhance, images_by_filename):
        """
        Setter for this ImageEnhancer instance variables. Runs algorithms on selected images.

        Args:
            radius_denoising (int): Denoising radius
            radius_circle (ing): Radius of marker circle
            algs (list): List of algorithms to apply to data
            colormap (list): The selected colormap
            do_enhance (bool): Whether to enhance outputted images
            images_by_filename (list): List of filenames of images to enhance

        Returns:
            None, sets self.ORIGINAL_IMAGES, self.ENHANCED_IMAGES, and self.DOWNLOAD_PATHS_BY_IMAGE
        """
        self.ORIGINAL_IMAGES = list()
        self.ENHANCED_IMAGES = list()
        self.DOWNLOAD_PATHS_BY_IMAGE = list()

        for img_num in range(len(images_by_filename)):
            self.ORIGINAL_IMAGES.append(images_by_filename[img_num])
            enhanced_image_by_alg = list()
            for abbr, alg in algs:
                start = time.time()
                enhanced_image = lsd.detect_signal(images_by_filename[img_num], alg, do_enhance,
                                                   radius_denoising, radius_circle)

                print(f"Finished doing {abbr} on {images_by_filename[img_num]} in {round(time.time()-start, 2)}s")

                path = os.path.join(app.config['ENHANCED_FOLDER'], f'image{img_num}_{abbr}.png')
                enhanced_image = cv2.applyColorMap(enhanced_image, colormap=colormap)
                cv2.imwrite(path, enhanced_image)
                enhanced_image_by_alg.append({"alg_name": f"{get_algorithm_name(abbr)}", "filename": path})

            self.ENHANCED_IMAGES.append({"img_num": img_num, "enhanced_by_alg": enhanced_image_by_alg})

        paths = [[img['filename'] for img in enhanced_image['enhanced_by_alg']] for enhanced_image in self.ENHANCED_IMAGES]

        for i in range(len(images_by_filename)):
            self.DOWNLOAD_PATHS_BY_IMAGE.append(paths[i])

        print("Finished running algorithms...")


@app.route('/<enhancer_id>')
def enhanced_images(enhancer_id):
    """
    Display the images contained within the user's ImageEnhancer
    """
    image_enhancer = find_image_enhancer_by_id(enhancer_id)
    return render_template("algorithm.html", original_images=image_enhancer.ORIGINAL_IMAGES,
                           enhanced_images=image_enhancer.ENHANCED_IMAGES,
                           download_paths_by_image=image_enhancer.DOWNLOAD_PATHS_BY_IMAGE,
                           user_id=image_enhancer.ID)


@app.route('/download_all/<i>/<enhancer_id>')
def download_all(i, enhancer_id):
    """
    Downloads all images from self.DOWNLOAD_PATHS_BY_IMAGE[i] (representing the images generated by the various algs
    applied to "i"th image) as .zip file.

    Args:
        i (int): The number image for which to download algs applied
        enhancer_id (str): The unique ID of the current user's ImageEnhancer
    """
    image_enhancer = find_image_enhancer_by_id(enhancer_id)
    paths = image_enhancer.DOWNLOAD_PATHS_BY_IMAGE[int(i)]
    stream = BytesIO()
    with ZipFile(stream, 'w') as zf:
        for file in paths:
            zf.write(file, os.path.basename(file))
    stream.seek(0)

    return send_file(
        stream,
        as_attachment=True,
        attachment_filename='enhanced_image.zip'
    )


@app.route('/algorithm', methods=['POST'])
def algorithm():
    """
    Creates new ImageEnhancer and a thread to run its run_algorithm() method. Returns a screen which will take the
    user to a screen containing the images he has enhanced
    """
    image_enhancer = ImageEnhancer()
    IMAGE_ENHANCERS.append(image_enhancer)

    radius_denoising = int(request.form['noiseRadiusInput'])
    radius_circle = int(request.form['circleRadiusInput'])
    algs = [(abbr, get_algorithm(abbr)) for abbr in request.form.getlist('algorithmCheckbox')]
    if algs == list():
        return redirect('/')
    colormap = request.form.get('colormapInput')

    if colormap is None:
        colormap = cv2.COLORMAP_BONE
    else:
        colormap = get_colormap_by_name(colormap)

    do_enhance = True

    images = flask.request.files.getlist('fileUploadInput')
    images_by_filename = list()
    for image in images:
        if image.filename == '':
            return redirect('/')
        if image and allowed_file(image.filename):
            filename = secure_filename(image.filename)
            path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            while True:
                try:
                    image.save(path)
                    images_by_filename.append(path)
                    break
                except IsADirectoryError:
                    path += "(1)"

    args = (radius_denoising, radius_circle, algs, colormap, do_enhance, images_by_filename)
    t = threading.Thread(target=image_enhancer.run_algorithm, args=args)
    t.start()

    return render_template('submitted.html', user_id=image_enhancer.ID)


# Create folders to store user uploaded and enhanced images
enhanced_image_folder = os.path.join('static', 'enhanced_data')
upload_folder = os.path.join('static', 'uploads')
app.config['ENHANCED_FOLDER'] = enhanced_image_folder
app.config['UPLOAD_FOLDER'] = upload_folder

# Set allowed extensions
ALLOWED_EXTENSIONS = {'tiff'}

# Make sure user upload and enhanced image folders exist
if not (os.path.exists(enhanced_image_folder)):
    os.makedirs(enhanced_image_folder)

if not (os.path.exists(upload_folder)):
    os.makedirs(upload_folder)

# Create a new instance of the ImageEnhancer class to store user data
IMAGE_ENHANCERS = list()

# Start the flask app
port = int(os.environ.get('PORT', 5000))
app.run(host='0.0.0.0', port=port)
